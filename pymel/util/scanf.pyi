from _typeshed import Incomplete

class CharacterBuffer:
    def getch(self) -> None: ...
    def ungetch(self, ch) -> None: ...
    def scanCharacterSet(self, characterSet, maxChars: int = ...): ...
    def scanPredicate(self, predicate, maxChars: int = ...): ...

class CharacterBufferFromIterable(CharacterBuffer):
    iterator: Incomplete
    lastChar: str
    def __init__(self, iterable) -> None: ...
    def getch(self): ...
    def ungetch(self, ch) -> None: ...

class CharacterBufferFromFile(CharacterBuffer):
    myfile: Incomplete
    lastPos: Incomplete
    def __init__(self, myfile) -> None: ...
    def getch(self): ...
    def ungetch(self, ch) -> None: ...

class CappedBuffer(CharacterBuffer):
    buffer: Incomplete
    bytesRead: int
    width: Incomplete
    ignoreWhitespace: Incomplete
    def __init__(self, buffer, width, ignoreWhitespace: bool = ...) -> None: ...
    def getch(self): ...
    def isIgnoredChar(self, ch): ...
    def ungetch(self, ch) -> None: ...

class FormatError(ValueError): ...
class IncompleteCaptureError(ValueError): ...

def scanf(formatString): ...
def sscanf(inputString, formatString): ...
def fscanf(inputFile, formatString): ...

class CompiledPattern:
    handlers: Incomplete
    formatString: Incomplete
    def __init__(self, handlers, formatString) -> None: ...
    def __call__(self, buffer): ...
