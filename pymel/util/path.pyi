import os
from _typeshed import Incomplete
from collections.abc import Generator

basestring = str
getcwdu = os.getcwd
getcwdu = os.getcwd

class TreeWalkWarning(Warning): ...

class ClassProperty(property):
    def __get__(self, cls, owner): ...

class multimethod:
    func: Incomplete
    def __init__(self, func) -> None: ...
    def __get__(self, instance, owner): ...

class path(str):
    module: Incomplete
    def __init__(self, other: str = ...) -> None: ...
    @classmethod
    def using_module(cls, module): ...
    def __add__(self, more): ...
    def __radd__(self, other): ...
    def __truediv__(self, rel): ...
    __div__ = __truediv__
    def __enter__(self): ...
    def __exit__(self, *_) -> None: ...
    @classmethod
    def getcwd(cls): ...
    def abspath(self): ...
    def normcase(self): ...
    def normpath(self): ...
    def realpath(self): ...
    def expanduser(self): ...
    def expandvars(self): ...
    def dirname(self): ...
    def basename(self): ...
    def expand(self): ...
    @property
    def namebase(self): ...
    @property
    def ext(self): ...
    @property
    def drive(self): ...
    parent: Incomplete
    name: Incomplete
    def splitpath(self): ...
    def splitdrive(self): ...
    def splitext(self): ...
    def stripext(self): ...
    def splitunc(self): ...
    @property
    def uncshare(self): ...
    def joinpath(cls, first, *others): ...
    def splitall(self): ...
    def relpath(self, start: str = ...): ...
    def relpathto(self, dest): ...
    def listdir(self, pattern: Incomplete | None = ..., realpath: bool = ...): ...
    def dirs(self, pattern: Incomplete | None = ..., realpath: bool = ...): ...
    def files(self, pattern: Incomplete | None = ..., realpath: bool = ...): ...
    def walk(self, pattern: Incomplete | None = ..., errors: str = ..., realpath: bool = ..., regex: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def walkdirs(self, pattern: Incomplete | None = ..., errors: str = ..., realpath: bool = ..., regex: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def walkfiles(self, pattern: Incomplete | None = ..., errors: str = ..., realpath: bool = ..., regex: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def fnmatch(self, pattern, normcase: Incomplete | None = ...): ...
    def regmatch(self, pattern, normcase: Incomplete | None = ...): ...
    def match(self, pattern, normcase: Incomplete | None = ...): ...
    def glob(self, pattern): ...
    def open(self, *args, **kwargs): ...
    def bytes(self): ...
    def chunks(self, size, *args, **kwargs) -> Generator[Incomplete, None, None]: ...
    def write_bytes(self, bytes, append: bool = ...) -> None: ...
    def text(self, encoding: Incomplete | None = ..., errors: str = ...): ...
    def write_text(self, text, encoding: Incomplete | None = ..., errors: str = ..., linesep=..., append: bool = ...) -> None: ...
    def lines(self, encoding: Incomplete | None = ..., errors: str = ..., retain: bool = ...): ...
    def write_lines(self, lines, encoding: Incomplete | None = ..., errors: str = ..., linesep=..., append: bool = ...) -> None: ...
    def read_md5(self): ...
    def read_hash(self, hash_name): ...
    def read_hexhash(self, hash_name): ...
    def isabs(self): ...
    def exists(self): ...
    def isdir(self): ...
    def isfile(self): ...
    def islink(self): ...
    def ismount(self): ...
    def samefile(self, other): ...
    def samepath(self, other): ...
    def canonicalpath(self): ...
    def truepath(self): ...
    def getatime(self): ...
    atime: Incomplete
    def getmtime(self): ...
    mtime: Incomplete
    def getctime(self): ...
    ctime: Incomplete
    def getsize(self): ...
    size: Incomplete
    def access(self, mode): ...
    def stat(self): ...
    def lstat(self): ...
    get_owner: Incomplete
    owner: Incomplete
    def utime(self, times): ...
    def chmod(self, mode): ...
    def chown(self, uid: int = ..., gid: int = ...): ...
    def get_groupname(self): ...
    groupname: Incomplete
    def chgrp(self, group) -> None: ...
    def statvfs(self): ...
    def pathconf(self, name): ...
    def rename(self, new): ...
    def renames(self, new): ...
    def mkdir(self, mode=...): ...
    def mkdir_p(self, mode=...): ...
    def makedirs(self, mode=...): ...
    def makedirs_p(self, mode=...): ...
    def rmdir(self): ...
    def rmdir_p(self): ...
    def removedirs(self): ...
    def removedirs_p(self): ...
    def touch(self): ...
    def remove(self): ...
    def remove_p(self): ...
    def unlink(self): ...
    def unlink_p(self): ...
    def link(self, newpath): ...
    def symlink(self, newlink): ...
    def readlink(self): ...
    def readlinkabs(self): ...
    copyfile: Incomplete
    copymode: Incomplete
    copystat: Incomplete
    copy: Incomplete
    copy2: Incomplete
    copytree: Incomplete
    move: Incomplete
    rmtree: Incomplete
    def rmtree_p(self): ...
    def chdir(self) -> None: ...
    cd = chdir
    def chroot(self) -> None: ...
    def startfile(self): ...

class tempdir(path):
    def __new__(cls, *args, **kwargs): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...

class CaseInsensitivePattern(str):
    @property
    def normcase(self): ...
Path = path
