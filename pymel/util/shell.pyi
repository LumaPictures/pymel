from typing import *
from typing import Any

def appendEnv(env: str, value: str) -> None: ...
def prependEnv(env: str, value: str) -> None: ...
def getEnv(env: str, default: Optional[str] = ...) -> str: ...
def getEnvs(env: str, default: Any = ...) -> List[str]: ...
def putEnv(env: str, value: str) -> None: ...
def refreshEnviron() -> None: ...
@overload
def executableOutput(exeAndArgs: Iterable[str], convertNewlines: bool = ..., stripTrailingNewline: bool = ..., returnCode: Literal[True] = ..., input: str = ..., **kwargs: Any) -> None: ...
@overload
def executableOutput(exeAndArgs: Iterable[str], convertNewlines: bool = ..., stripTrailingNewline: bool = ..., input: str = ..., **kwargs: Any) -> str: ...
@overload
def shellOutput(exeAndArgs: str, convertNewlines: bool = ..., stripTrailingNewline: bool = ..., returnCode: Literal[True] = ..., input: str = ..., **kwargs: Any) -> None: ...
@overload
def shellOutput(exeAndArgs: str, convertNewlines: bool = ..., stripTrailingNewline: bool = ..., input: str = ..., **kwargs: Any) -> str: ...
