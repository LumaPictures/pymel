from _typeshed import Incomplete

__tabversion__: str
StringTypes: Incomplete

class LexError(Exception):
    args: Incomplete
    text: Incomplete
    def __init__(self, message, s) -> None: ...

class LexToken: ...

class PlyLogger:
    f: Incomplete
    def __init__(self, f) -> None: ...
    def critical(self, msg, *args, **kwargs) -> None: ...
    def warning(self, msg, *args, **kwargs) -> None: ...
    def error(self, msg, *args, **kwargs) -> None: ...
    info = critical
    debug = critical

class NullLogger:
    def __getattribute__(self, name): ...
    def __call__(self, *args, **kwargs): ...

class Lexer:
    lexre: Incomplete
    lexretext: Incomplete
    lexstatere: Incomplete
    lexstateretext: Incomplete
    lexstaterenames: Incomplete
    lexstate: str
    lexstatestack: Incomplete
    lexstateinfo: Incomplete
    lexstateignore: Incomplete
    lexstateerrorf: Incomplete
    lexstateeoff: Incomplete
    lexreflags: int
    lexdata: Incomplete
    lexpos: int
    lexlen: int
    lexerrorf: Incomplete
    lexeoff: Incomplete
    lextokens: Incomplete
    lexignore: str
    lexliterals: str
    lexmodule: Incomplete
    lineno: int
    lexoptimize: bool
    def __init__(self) -> None: ...
    def clone(self, object: Incomplete | None = ...): ...
    def writetab(self, lextab, outputdir: str = ...) -> None: ...
    lextokens_all: Incomplete
    def readtab(self, tabfile, fdict) -> None: ...
    def input(self, s) -> None: ...
    def begin(self, state) -> None: ...
    def push_state(self, state) -> None: ...
    def pop_state(self) -> None: ...
    def current_state(self): ...
    def skip(self, n) -> None: ...
    lexmatch: Incomplete
    def token(self): ...
    def __iter__(self): ...
    def next(self): ...
    __next__ = next

def get_caller_module_dict(levels): ...

class LexerReflect:
    ldict: Incomplete
    error_func: Incomplete
    tokens: Incomplete
    reflags: Incomplete
    stateinfo: Incomplete
    modules: Incomplete
    error: bool
    log: Incomplete
    def __init__(self, ldict, log: Incomplete | None = ..., reflags: int = ...) -> None: ...
    def get_all(self) -> None: ...
    def validate_all(self): ...
    def get_tokens(self) -> None: ...
    def validate_tokens(self) -> None: ...
    literals: Incomplete
    def get_literals(self) -> None: ...
    def validate_literals(self) -> None: ...
    states: Incomplete
    def get_states(self) -> None: ...
    toknames: Incomplete
    funcsym: Incomplete
    strsym: Incomplete
    ignore: Incomplete
    errorf: Incomplete
    eoff: Incomplete
    def get_rules(self): ...
    def validate_rules(self) -> None: ...
    def validate_module(self, module) -> None: ...

def lex(module: Incomplete | None = ..., object: Incomplete | None = ..., debug: bool = ..., optimize: bool = ..., lextab: str = ..., reflags=..., nowarn: bool = ..., outputdir: Incomplete | None = ..., debuglog: Incomplete | None = ..., errorlog: Incomplete | None = ...): ...
def runmain(lexer: Incomplete | None = ..., data: Incomplete | None = ...) -> None: ...
def TOKEN(r): ...
Token = TOKEN
