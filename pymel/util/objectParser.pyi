from pymel.util.arguments import *
from pymel.util.utilitytypes import *
from .common import capitalize as capitalize, uncapitalize as uncapitalize
from _typeshed import Incomplete
from collections.abc import Generator

def verbose(): ...
def currentfn(): ...

class NameParseError(Exception): ...
class ParsingWarning(UserWarning): ...

ProxyUni: Incomplete

class Parsed(ProxyUni):
    classes: Incomplete
    @classmethod
    def accepts(cls, other): ...
    def compileName(self): ...
    @classmethod
    def getParserClass(cls, parsername) -> None: ...
    @classmethod
    def classparserbuild(cls, **kwargs) -> None: ...
    @classmethod
    def classparse(cls, data, **kwargs): ...
    @classmethod
    def classparser(cls): ...
    def parse(self, data, **kwargs): ...
    @property
    def parser(self): ...
    @property
    def tokens(self) -> Generator[Incomplete, None, None]: ...
    @property
    def sub(self) -> Sequence[Parsed]: ...
    def setSubItem(self, index, value) -> None: ...
    @property
    def pos(self): ...
    def isValid(self): ...
    def copy(self): ...
    def findType(self, type): ...
    def __new__(cls, *args, **kwargs): ...
    def __add__(self, other): ...

class Parser:
    classes: Incomplete
    def __new__(cls, *args, **kwargs): ...
    errorcount: int
    lexer: Incomplete
    parser: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def t_error(self, t) -> None: ...
    def p_error(self, p) -> None: ...
    @staticmethod
    def getRulesAndTokens(parsercls): ...
    def build(self, **kwargs) -> None: ...
    def parse(self, data, **kwargs): ...

class Token(Parsed): ...

class TokenParser(Parser):
    parser: Incomplete
    def build(self, **kwargs) -> None: ...
    errorcount: int
    def parse(self, data, **kwargs): ...

class EmptyTokenParser(Parser):
    def build(self, **kwargs) -> None: ...
    errorcount: int
    def parse(self, data, **kwargs): ...

class EmptyParser(Parser):
    start: str
    def p_empty(self, p) -> None: ...

def isParsedClass(x): ...
def isParserClass(x): ...

class autoparsed(type):
    def __new__(mcl, classname, bases, classdict): ...

def process(module: Incomplete | None = ...) -> None: ...
