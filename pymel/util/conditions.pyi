from _typeshed import Incomplete

class NO_DATA(Exception): ...

class Condition:
    value: Incomplete
    def __init__(self, value: Incomplete | None = ...) -> None: ...
    def eval(self, data=...): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __and__(self, other): ...
    def __rand__(self, other): ...
    def __invert__(self): ...
    def __bool__(self): ...

Always: Incomplete
Never: Incomplete

class Inverse(Condition):
    toInvert: Incomplete
    def __init__(self, toInvert) -> None: ...
    def eval(self, data=...): ...

class AndOrAbstract(Condition):
    args: Incomplete
    def __init__(self, *args) -> None: ...
    def eval(self, data=...): ...

class And(AndOrAbstract): ...
class Or(AndOrAbstract): ...
