from typing import *
import pymel.util as _util
from _typeshed import Incomplete
from builtins import str
from typing import Any, Callable, List, Optional, Tuple, TypeVar, Union, overload

NameParserT = TypeVar('NameParserT', bound=NameParser)
DependNodeNameT = TypeVar('DependNodeNameT', bound=DependNodeName)

class NameParser(str):
    PARENT_SEP: str
    def __new__(cls, strObj): ...
    def __getattr__(self, attr): ...
    def stripNamespace(self, levels: int = ...) -> NameParserT: ...
    def stripGivenNamespace(self, namespace: str, partial: bool = ...) -> NameParserT: ...
    def swapNamespace(self, prefix: str) -> NameParserT: ...
    def namespaceList(self) -> List[str]: ...
    def namespace(self) -> str: ...
    def addPrefix(self, prefix: str) -> NameParserT: ...
    def attr(self, attr: str) -> AttributeName: ...

class AttributeName(NameParser):
    attrItemReg: Incomplete
    def __init__(self, attrName) -> None: ...
    def __getitem__(self, item): ...
    def __call__(self, *args, **kwargs) -> None: ...
    def array(self) -> AttributeName: ...
    def plugNode(self) -> NameParser: ...
    node = plugNode
    def plugAttr(self) -> str: ...
    def lastPlugAttr(self) -> str: ...
    def nodeName(self) -> str: ...
    def item(self, asSlice: bool = ..., asString: bool = ...): ...
    def getParent(self, generations: int = ...) -> AttributeName: ...
    def addAttr(self, **kwargs): ...
    def setAttr(self, *args, **kwargs): ...
    set = setAttr
    add = addAttr
    def exists(self): ...

class DependNodeName(NameParser):
    def node(self) -> DependNodeNameT: ...
    def nodeName(self) -> DependNodeNameT: ...
    def exists(self, **kwargs): ...
    def stripNum(self) -> str: ...
    def extractNum(self) -> str: ...
    def nextUniqueName(self) -> DependNodeNameT: ...
    def nextName(self) -> DependNodeNameT: ...
    def prevName(self) -> DependNodeNameT: ...

class DagNodeName(DependNodeName):
    def root(self) -> DagNodeName: ...
    def getRoot(self) -> DagNodeName: ...
    def firstParent(self) -> DagNodeName: ...
    def getParent(self, generations: int = ...) -> DagNodeName: ...
    def nodeName(self) -> str: ...

def TanimLayer(*args) -> Any: ...
def TrenderSetupStates(*args) -> Any: ...
def adpAnalyticsDialog(*args, activeNotification: bool | int = ..., an: bool | int = ..., desktopAnalytics: bool | int = ..., da: bool | int = ...) -> Any: ...
def adskAsset(*args, assetID: _util.ProxyUnicode | str = ..., a: _util.ProxyUnicode | str = ..., library: _util.ProxyUnicode | str = ..., l: _util.ProxyUnicode | str = ..., query: bool | int = ..., q: bool | int = ..., resolved: bool | int = ..., r: bool | int = ...) -> Any: ...
def adskAssetLibrary(*args, unload: bool | int = ..., ul: bool | int = ..., unloadAll: bool | int = ..., ua: bool | int = ...) -> Any: ...
def adskAssetList(*args, infoType: _util.ProxyUnicode | str = ..., it: _util.ProxyUnicode | str = ...) -> Any: ...

def adskAssetListUI(*args, commandSuffix: _util.ProxyUnicode | str = ..., cms: _util.ProxyUnicode | str = ..., materialLoaded: bool | int = ..., mld: bool | int = ..., query: bool | int = ..., q: bool | int = ..., uiCommand: _util.ProxyUnicode | str = ..., uiC: _util.ProxyUnicode | str = ...): ...

def agFormatIn(*args, file: _util.ProxyUnicode | str = ..., f: _util.ProxyUnicode | str = ..., name: _util.ProxyUnicode | str = ..., n: _util.ProxyUnicode | str = ...) -> Any: ...
def agFormatOut(*args, file: _util.ProxyUnicode | str = ..., f: _util.ProxyUnicode | str = ...) -> Any: ...
def artAttr(*args) -> Any: ...
def artAttrSkinPaint(*args) -> Any: ...
def artAttrSkinPaintCmd(*args) -> Any: ...
def artFluidAttr(*args) -> Any: ...
def artSelect(*args) -> Any: ...
def artSetPaint(*args) -> Any: ...
def attrCompatibility(*args, addAttr: bool | int = ..., a: bool | int = ..., clear: bool | int = ..., clr: bool | int = ..., dumpTable: bool | int = ..., dmp: bool | int = ..., enable: bool | int = ..., e: bool | int = ..., nodeRename: _util.ProxyUnicode | str = ..., nr: _util.ProxyUnicode | str = ..., pluginNode: _util.ProxyUnicode | str = ..., pn: _util.ProxyUnicode | str = ..., removeAttr: bool | int = ..., rm: bool | int = ..., renameAttr: _util.ProxyUnicode | str = ..., r: _util.ProxyUnicode | str = ..., type: _util.ProxyUnicode | str = ..., typ: _util.ProxyUnicode | str = ..., version: _util.ProxyUnicode | str = ..., v: _util.ProxyUnicode | str = ...) -> Any: ...
def blend(*args, autoDirection: bool | int = ..., ad: bool | int = ..., caching: bool | int = ..., cch: bool | int = ..., constructionHistory: bool | int = ..., ch: bool | int = ..., crvsInFirstRail: int = ..., cfr: int = ..., edit: bool | int = ..., e: bool | int = ..., flipLeft: bool | int = ..., fl: bool | int = ..., flipRight: bool | int = ..., fr: bool | int = ..., frozen: bool | int = ..., fzn: bool | int = ..., leftParameter: float = ..., lp: float = ..., multipleKnots: bool | int = ..., mk: bool | int = ..., name: _util.ProxyUnicode | str = ..., n: _util.ProxyUnicode | str = ..., nodeState: int = ..., nds: int = ..., object: bool | int = ..., o: bool | int = ..., polygon: int = ..., po: int = ..., positionTolerance: float = ..., pt: float = ..., query: bool | int = ..., q: bool | int = ..., rightParameter: float = ..., rp: float = ..., tangentTolerance: float = ..., tt: float = ...) -> Any: ...
def caddyManip(*args) -> Any: ...
def clearShear(*args) -> Any: ...
def copyNode(*args) -> Any: ...
def crashInfoCmd(*args) -> Any: ...
def dagCommandWrapper(*args) -> Any: ...
def dagObjectHit(*args, cache: bool | int = ..., ch: bool | int = ..., menu: _util.ProxyUnicode | str = ..., mn: _util.ProxyUnicode | str = ..., multiple: bool | int = ..., m: bool | int = ..., targetSize: int = ..., ts: int = ...) -> Any: ...
def debug(*args) -> Any: ...
def debugNamespace(*args) -> Any: ...
def debugVar(*args) -> Any: ...
def dgControl(*args) -> Any: ...
def dgPerformance(*args) -> Any: ...
def dgcontrol(*args, iomode: bool | int = ..., iom: bool | int = ...) -> Any: ...
def dgdebug(*args) -> Any: ...
def dgstats(*args) -> Any: ...
def directConnectPath(*args) -> Any: ...
def dispatchGenericCommand(*args) -> Any: ...
def dynTestData(*args, arrayAttrs: bool | int = ..., aa: bool | int = ..., verbose: bool | int = ..., v: bool | int = ...) -> Any: ...
def evalContinue(*args) -> Any: ...
def evaluationManagerInternal(*args, dataSharing: bool | int = ..., ds: bool | int = ..., dataTypeShare: bool | int = ..., dts: bool | int = ..., query: bool | int = ..., q: bool | int = ...) -> Any: ...
def evaluatorInternal(*args, name: _util.ProxyUnicode | str = ..., n: _util.ProxyUnicode | str = ..., query: bool | int = ..., q: bool | int = ..., ready: bool | int = ..., r: bool | int = ...) -> Any: ...
def extendFluid(*args, edit: bool | int = ..., e: bool | int = ..., endD: int = ..., ed: int = ..., endH: int = ..., eh: int = ..., endW: int = ..., ew: int = ..., query: bool | int = ..., q: bool | int = ..., startD: int = ..., sd: int = ..., startH: int = ..., sh: int = ..., startW: int = ..., sw: int = ...) -> Any: ...

def flagTest(*args, edit: bool | int = ..., e: bool | int = ..., floatRange: None | List[None] = ..., fr: None | List[None] = ..., indexRange: None | List[None] = ..., ir: None | List[None] = ..., multiUse: Tuple[float, int, str] | List[Tuple[float, int, str]] = ..., mu: Tuple[float, int, str] | List[Tuple[float, int, str]] = ..., noReport: bool | int = ..., nr: bool | int = ..., optionalQueryArgsFlag: Tuple[float, int, str] = ..., oqa: Tuple[float, int, str] = ..., pythonOptionalQueryArgsFlag: Tuple[float, int, str] = ..., poq: Tuple[float, int, str] = ..., pythonQueryArgsFlag: Tuple[float, int, str] = ..., pq: Tuple[float, int, str] = ..., query: bool | int = ..., q: bool | int = ..., queryArgsFlag: Tuple[float, int, str] = ..., qa: Tuple[float, int, str] = ..., simpleFlag: bool | int = ..., s: bool | int = ..., stringArrayFlag: None = ..., saf: None = ..., stringFlag: _util.ProxyUnicode | str = ..., sf: _util.ProxyUnicode | str = ..., timeRange: None | List[None] = ..., tr: None | List[None] = ..., tripleFloat: Tuple[float, float, float] = ..., tf: Tuple[float, float, float] = ...): ...

def flushIdleQueue(*args, resume: bool | int = ..., r: bool | int = ...) -> Any: ...
def flushThumbnailCache(*args) -> Any: ...
def greasePencil(*args) -> Any: ...
def greasePencilHelper(*args, brushType: int = ..., bt: int = ..., contextName: _util.ProxyUnicode | str = ..., cn: _util.ProxyUnicode | str = ..., edit: bool | int = ..., e: bool | int = ..., query: bool | int = ..., q: bool | int = ..., setColor: Tuple[float, float, float] = ..., sc: Tuple[float, float, float] = ..., updateVar: Tuple[str, float] = ..., uv: Tuple[str, float] = ...) -> Any: ...
def greaseRenderPlane(*args, axis: Tuple[float, float, float] = ..., ax: Tuple[float, float, float] = ..., caching: bool | int = ..., cch: bool | int = ..., componentTagCreate: bool | int = ..., ctc: bool | int = ..., constructionHistory: bool | int = ..., ch: bool | int = ..., createUVs: int = ..., cuv: int = ..., edit: bool | int = ..., e: bool | int = ..., frozen: bool | int = ..., fzn: bool | int = ..., height: float = ..., h: float = ..., name: _util.ProxyUnicode | str = ..., n: _util.ProxyUnicode | str = ..., nodeState: int = ..., nds: int = ..., object: bool | int = ..., o: bool | int = ..., query: bool | int = ..., q: bool | int = ..., subdivisionsHeight: int = ..., sh: int = ..., subdivisionsWidth: int = ..., sw: int = ..., subdivisionsX: int = ..., sx: int = ..., subdivisionsY: int = ..., sy: int = ..., texture: int = ..., tx: int = ..., width: float = ..., w: float = ...) -> Any: ...
def groupParts(*args) -> Any: ...
def hotkeyEditor(*args) -> Any: ...
def hotkeyMapSet(*args) -> Any: ...

def imageWindowEditor(*args, autoResize: bool | int = ..., ar: bool | int = ..., changeCommand: Tuple[str, str, str, str] = ..., cc: Tuple[str, str, str, str] = ..., clear: Tuple[int, int, float, float, float] = ..., cl: Tuple[int, int, float, float, float] = ..., control: bool | int = ..., ctl: bool | int = ..., defineTemplate: _util.ProxyUnicode | str = ..., dt: _util.ProxyUnicode | str = ..., displayImage: int = ..., di: int = ..., displayStyle: _util.ProxyUnicode | str = ..., dst: _util.ProxyUnicode | str = ..., docTag: _util.ProxyUnicode | str = ..., dtg: _util.ProxyUnicode | str = ..., doubleBuffer: bool | int = ..., dbf: bool | int = ..., drawAxis: bool | int = ..., da: bool | int = ..., edit: bool | int = ..., e: bool | int = ..., exists: bool | int = ..., ex: bool | int = ..., filter: _util.ProxyUnicode | str = ..., f: _util.ProxyUnicode | str = ..., forceMainConnection: _util.ProxyUnicode | str = ..., fmc: _util.ProxyUnicode | str = ..., frameImage: bool | int = ..., fi: bool | int = ..., frameRegion: bool | int = ..., fr: bool | int = ..., highlightConnection: _util.ProxyUnicode | str = ..., hlc: _util.ProxyUnicode | str = ..., loadImage: _util.ProxyUnicode | str = ..., li: _util.ProxyUnicode | str = ..., lockMainConnection: bool | int = ..., lck: bool | int = ..., mainListConnection: _util.ProxyUnicode | str = ..., mlc: _util.ProxyUnicode | str = ..., marquee: Tuple[float, float, float, float] = ..., mq: Tuple[float, float, float, float] = ..., nbImages: bool | int = ..., nim: bool | int = ..., panel: _util.ProxyUnicode | str = ..., pnl: _util.ProxyUnicode | str = ..., parent: _util.ProxyUnicode | str = ..., p: _util.ProxyUnicode | str = ..., query: bool | int = ..., q: bool | int = ..., realSize: bool | int = ..., rs: bool | int = ..., refresh: bool | int = ..., ref: bool | int = ..., removeAllImages: bool | int = ..., ra: bool | int = ..., removeImage: bool | int = ..., ri: bool | int = ..., saveImage: bool | int = ..., si: bool | int = ..., scaleBlue: float = ..., sb: float = ..., scaleGreen: float = ..., sg: float = ..., scaleRed: float = ..., sr: float = ..., selectionConnection: _util.ProxyUnicode | str = ..., slc: _util.ProxyUnicode | str = ..., showRegion: Tuple[int, int] = ..., srg: Tuple[int, int] = ..., singleBuffer: bool | int = ..., sbf: bool | int = ..., stateString: bool | int = ..., sts: bool | int = ..., toggle: bool | int = ..., tgl: bool | int = ..., unParent: bool | int = ..., up: bool | int = ..., unlockMainConnection: bool | int = ..., ulk: bool | int = ..., updateMainConnection: bool | int = ..., upd: bool | int = ..., useTemplate: _util.ProxyUnicode | str = ..., ut: _util.ProxyUnicode | str = ..., writeImage: _util.ProxyUnicode | str = ..., wi: _util.ProxyUnicode | str = ...): ...

def interactionStyle(*args, query: bool | int = ..., q: bool | int = ..., style: _util.ProxyUnicode | str = ..., s: _util.ProxyUnicode | str = ...) -> Any: ...
def iterOnNurbs(*args) -> Any: ...
def journal(*args, comment: _util.ProxyUnicode | str = ..., c: _util.ProxyUnicode | str = ..., flush: bool | int = ..., fl: bool | int = ..., highPrecision: bool | int = ..., hp: bool | int = ..., query: bool | int = ..., q: bool | int = ..., state: bool | int = ..., st: bool | int = ...) -> Any: ...
def licenseCheck(*args, mode: _util.ProxyUnicode | str = ..., m: _util.ProxyUnicode | str = ..., type: _util.ProxyUnicode | str = ..., typ: _util.ProxyUnicode | str = ...) -> Any: ...
def manipComponentPivot(*args) -> Any: ...
def manipComponentUpdate(*args) -> Any: ...
def matrix(*args) -> Any: ...
def mayaDpiSettingAction(*args) -> Any: ...
def meshIntersectTest(*args) -> Any: ...
def mimicMnipulation(*args) -> Any: ...
def mouldMesh(*args) -> Any: ...
def mouldSrf(*args) -> Any: ...
def mouldSubdiv(*args) -> Any: ...
def movieCompressor(*args, hardwareOptions: bool | int = ..., ho: bool | int = ..., softwareOptions: bool | int = ..., so: bool | int = ...) -> Any: ...
def myTestCmd(*args) -> Any: ...
def nodeGrapher(*args) -> Any: ...
def nop(*args) -> Any: ...
def nurbsCurveRebuildPref(*args, degree: int = ..., d: int = ..., endKnots: int = ..., end: int = ..., fitRebuild: int = ..., fr: int = ..., keepControlPoints: bool | int = ..., kcp: bool | int = ..., keepEndPoints: bool | int = ..., kep: bool | int = ..., keepRange: int = ..., kr: int = ..., keepTangents: bool | int = ..., kt: bool | int = ..., query: bool | int = ..., q: bool | int = ..., rebuildType: int = ..., rt: int = ..., smartSurfaceCurve: bool | int = ..., scr: bool | int = ..., spans: int = ..., s: int = ..., tolerance: float = ..., tol: float = ...) -> Any: ...
def ogsdebug(*args, count: int = ..., c: int = ..., debug: _util.ProxyUnicode | str = ..., d: _util.ProxyUnicode | str = ..., timing: _util.ProxyUnicode | str = ..., t: _util.ProxyUnicode | str = ..., verbose: bool | int = ..., v: bool | int = ...) -> Any: ...
def paint3d(*args) -> Any: ...
def polyColorSetCmdWrapper(*args) -> Any: ...
def polyIterOnPoly(*args) -> Any: ...
def polyPrimitiveMisc(*args) -> Any: ...
def polySelectEditCtxDataCmd(*args) -> Any: ...
def polySelectSp(*args, loop: bool | int = ..., l: bool | int = ..., query: bool | int = ..., q: bool | int = ..., ring: bool | int = ..., r: bool | int = ...) -> Any: ...
def polySetVertices(*args) -> Any: ...
def polySpinEdge(*args, caching: bool | int = ..., cch: bool | int = ..., constructionHistory: bool | int = ..., ch: bool | int = ..., edit: bool | int = ..., e: bool | int = ..., frozen: bool | int = ..., fzn: bool | int = ..., name: _util.ProxyUnicode | str = ..., n: _util.ProxyUnicode | str = ..., nodeState: int = ..., nds: int = ..., offset: int = ..., off: int = ..., query: bool | int = ..., q: bool | int = ..., reverse: bool | int = ..., rev: bool | int = ...) -> Any: ...
def polyTestPop(*args) -> Any: ...
def polyToCurve(*args, addUnderTransform: bool | int = ..., aut: bool | int = ..., caching: bool | int = ..., cch: bool | int = ..., conformToSmoothMeshPreview: bool | int = ..., usm: bool | int = ..., constructionHistory: bool | int = ..., ch: bool | int = ..., degree: int = ..., dg: int = ..., displaySmoothMesh: int = ..., dsm: int = ..., edit: bool | int = ..., e: bool | int = ..., form: int = ..., f: int = ..., frozen: bool | int = ..., fzn: bool | int = ..., name: _util.ProxyUnicode | str = ..., n: _util.ProxyUnicode | str = ..., nodeState: int = ..., nds: int = ..., object: bool | int = ..., o: bool | int = ..., query: bool | int = ..., q: bool | int = ...) -> Any: ...
def polyUVStackSimilarShellsCmd(*args) -> Any: ...
def polyWarpImage(*args, background: Tuple[int, int, int] = ..., bg: Tuple[int, int, int] = ..., bilinear: bool | int = ..., b: bool | int = ..., fileFormat: _util.ProxyUnicode | str = ..., ff: _util.ProxyUnicode | str = ..., inputName: _util.ProxyUnicode | str = ..., inputUvSetName: _util.ProxyUnicode | str = ..., iuv: _util.ProxyUnicode | str = ..., noAlpha: bool | int = ..., na: bool | int = ..., outputName: _util.ProxyUnicode | str = ..., on: _util.ProxyUnicode | str = ..., outputUvSetName: _util.ProxyUnicode | str = ..., ouv: _util.ProxyUnicode | str = ..., overwrite: bool | int = ..., o: bool | int = ..., tiled: bool | int = ..., t: bool | int = ..., xResolution: int = ..., xr: int = ..., yResolution: int = ..., yr: int = ...) -> Any: ...
def psdConvSolidTxOptions(*args) -> Any: ...
def rampWidget(*args) -> Any: ...
def rampWidgetAttrless(*args) -> Any: ...
def readPDC(*args, file: _util.ProxyUnicode | str = ..., f: _util.ProxyUnicode | str = ..., test: bool | int = ..., t: bool | int = ...) -> Any: ...

def repeatLast(*args, addCommand: _util.ProxyUnicode | str = ..., ac: _util.ProxyUnicode | str = ..., addCommandLabel: _util.ProxyUnicode | str = ..., acl: _util.ProxyUnicode | str = ..., commandList: int = ..., cl: int = ..., commandNameList: int = ..., cnl: int = ..., edit: bool | int = ..., e: bool | int = ..., historyLimit: int = ..., hl: int = ..., item: int = ..., i: int = ..., numberOfHistoryItems: bool | int = ..., nhi: bool | int = ..., query: bool | int = ..., q: bool | int = ...): ...

def retimeHelper(*args, deleteFrame: int = ..., df: int = ..., edit: bool | int = ..., e: bool | int = ..., frame: float = ..., f: float = ..., lockBar: Tuple[int, int] = ..., lb: Tuple[int, int] = ..., locks: int = ..., lk: int = ..., mouseOver: bool | int = ..., mo: bool | int = ..., moveFrame: Tuple[int, float] = ..., mf: Tuple[int, float] = ..., query: bool | int = ..., q: bool | int = ...) -> Any: ...
def safemodecheckhash(*args, co: bool | int = ..., pts: _util.ProxyUnicode | str = ..., wd: bool | int = ...) -> Any: ...

def selectKeyframe(*args, animation: _util.ProxyUnicode | str = ..., an: _util.ProxyUnicode | str = ..., attribute: str | List[str] = ..., at: str | List[str] = ..., controlPoints: bool | int = ..., cp: bool | int = ..., float: None | List[None] = ..., f: None | List[None] = ..., hierarchy: _util.ProxyUnicode | str = ..., hi: _util.ProxyUnicode | str = ..., includeUpperBound: bool | int = ..., iub: bool | int = ..., index: None | List[None] = ..., selectionWindow: Tuple[float, float, float, float] = ..., sel: Tuple[float, float, float, float] = ..., shape: bool | int = ..., s: bool | int = ..., time: None | List[None] = ..., t: None | List[None] = ...): ...

def subdDisplayMode(*args, hideFaceGadgets: bool | int = ..., hfg: bool | int = ..., query: bool | int = ..., q: bool | int = ..., showComponentsAsNumerals: bool | int = ..., scn: bool | int = ..., showFaceRegions: bool | int = ..., sfr: bool | int = ..., showVisualEdgeVertices: bool | int = ..., svv: bool | int = ..., showVisualEdges: bool | int = ..., sve: bool | int = ..., subdivEdgeMask: int = ..., sem: int = ...) -> Any: ...
def subdToNurbs(*args, addUnderTransform: bool | int = ..., aut: bool | int = ..., applyMatrixToResult: bool | int = ..., amr: bool | int = ..., caching: bool | int = ..., cch: bool | int = ..., constructionHistory: bool | int = ..., ch: bool | int = ..., edit: bool | int = ..., e: bool | int = ..., frozen: bool | int = ..., fzn: bool | int = ..., name: _util.ProxyUnicode | str = ..., n: _util.ProxyUnicode | str = ..., nodeState: int = ..., nds: int = ..., object: bool | int = ..., o: bool | int = ..., outputType: int = ..., ot: int = ..., query: bool | int = ..., q: bool | int = ...) -> Any: ...
def subgraph(*args) -> Any: ...
def syncSculptCache(*args) -> Any: ...
def testPa(*args) -> Any: ...
def testPassContribution(*args, renderLayer: _util.ProxyUnicode | str = ..., rl: _util.ProxyUnicode | str = ..., renderPass: _util.ProxyUnicode | str = ..., rp: _util.ProxyUnicode | str = ...) -> Any: ...
def texSculptCacheSync(*args) -> Any: ...

def timeRangeInfo(*args, time: None | List[None] = ..., t: None | List[None] = ...): ...

def timeSliderCustomDraw(*args, clearPrimitives: bool | int = ..., cp: bool | int = ..., color: Tuple[float, float, float, float] = ..., clr: Tuple[float, float, float, float] = ..., deregister: int = ..., der: int = ..., edit: bool | int = ..., e: bool | int = ..., height: int = ..., h: int = ..., layer: int = ..., l: int = ..., location: int = ..., loc: int = ..., priority: int = ..., p: int = ..., query: bool | int = ..., q: bool | int = ..., registerAbove: _util.ProxyUnicode | str = ..., rab: _util.ProxyUnicode | str = ..., registerBelow: _util.ProxyUnicode | str = ..., rbe: _util.ProxyUnicode | str = ..., registerOn: Tuple[str, int] = ..., ron: Tuple[str, int] = ..., setPrimitives: Tuple[str, float, float] = ..., sp: Tuple[str, float, float] = ..., visible: bool | int = ..., v: bool | int = ...) -> Any: ...
def warnUserDialog(*args, addInfo: Tuple[str, str] = ..., adi: Tuple[str, str] = ..., cbl: _util.ProxyUnicode | str = ..., dt: _util.ProxyUnicode | str = ..., ial: int = ..., lk: _util.ProxyUnicode | str = ..., message: _util.ProxyUnicode | str = ..., m: _util.ProxyUnicode | str = ..., title: _util.ProxyUnicode | str = ..., t: _util.ProxyUnicode | str = ..., w: int = ...) -> Any: ...
