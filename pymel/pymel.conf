# Default Logger Setup
#
#    root  (log level: NOTSET)
#    |  |
#    |  H-<rootHandler> -> stdout (script editor)
#    |
#    |
#    +-- pymel (log level: INFO)
#        |
#        +--[ pymel.general, etc...
#        |
#        +--[ pymel.internal
#           .
#           .
#           +---[ pymel.internal.factories
#                         |
#                         H-<consoleHandler> -> __stdout__ (console) (log level: WARNING)
#
# This is the default pymel configuration file.
# Pymel determines which configuration file to use by:
#    1. If a 'PYMEL_CONF' environment variable is defined, and the value it contains is an
#         existing file, this file is used
#    2. If a 'pymel.conf' file exists in the $HOME directory, this is used
#    3. Otherwise, the 'pymel.conf' file in the root pymel directory is used.
#
# The following sections are REQUIRED: [loggers], [formatters], [handlers], [logger_root]
# See the docs for logging.config for details on these elements...

[loggers]
keys=root,pymel,pymel_internal,pymel_internal_factories

[formatters]
keys=pymelFormatter

[handlers]
keys=consoleHandler,fileHandler

[logger_root]
## Setup the logging module's global root logger to output to the script-editor
level=NOTSET
handlers=
remove_existing_handlers=False

[logger_pymel]
## Set the root 'pymel' logger to INFO mode
## Setting PYMEL_LOGLEVEL environment variable will override this
level=INFO
qualname=pymel
handlers=

[logger_pymel_internal]
level=NOTSET
qualname=pymel.internal
handlers=

[logger_pymel_internal_factories]
## Log warnings from pymel.internal.factories to the console
level=NOTSET
qualname=pymel.internal.factories
handlers=consoleHandler

[formatter_pymelFormatter]
format=%(name)s : %(levelname)s : %(message)s
class=logging.Formatter


[handler_consoleHandler]
## This will stream to the shell (in Linux) or the Output window (in Windows)
class=StreamHandler
level=WARNING
formatter=pymelFormatter
args=(sys.__stdout__,)

[handler_fileHandler]
## This will output to a file, pymel.log
class=FileHandler
level=DEBUG
formatter=pymelFormatter
args=(os.path.expanduser('~/pymel.log'), 'w')

[pymel]
## The path_class option can be set to the name of an alternate base class for the Path class.
## It must include the module name where the class can be found
#path_class=luma.Filepath

## uncomment to allow instantiation of non-existent PyNode objects. this option will probably
## be removed in future versions and is offered to provide a grace period for those upgrading from
## pymel 0.7.
#0_7_compatibility_mode=on

## By default, in a standalone interpreter, pymel will attempt to do a full initialization of your MEL environment, such
## as sourcing userPrefs.mel, pluginPrefs.mel, and userSetup.mel.
## If this is undesirable, uncomment this option.  Alternately, you can set the environment variable PYMEL_SKIP_MEL_INIT
## to any value.
#skip_mel_init=on

## By default pymel will attempt to dynamically load the initial plugins by sourcing initialPlugins.mel. These plugins
## are dynamically loaded in maya, but not in maya batch or maya prompt. It also loads core maya plugins, the first time
## a release of maya is started.
## Uncomment this option to disable dynamically loading initial plugins.
#skip_initial_plugins=on

## mayapy in from 2011 on, has had a bug where it will segfault when exiting -
## if maya.standalone.initialize() is not called before exit. pymel installs
## some callbacks to try to ensure this happens - set this to off to disable
## this behavior
#fix_mayapy_segfault=off

## Older versions of pymel could attempt to fix this problem in a slightly
## different way, by installing an atexit handler that would do a "hard exit"
## with os._exit.  However, this only worked in Linux, and was a hackier
## solution, so it has now been deprecated, and turned off by default.
#fix_linux_mayapy_segfault=on

## By default pymel and the maya api do not check if a node is referenced before setting the lock state of an attribute.
## Mel and maya.cmds will raise errors for this situation.  Setting the lock state with pymel and the maya api is
## unsafe because changes to the locked state on referenced nodes are not saved with the scene.  To maintain backwards
## compatibility, pymel will not check if a node is referenced before changing the locked state.  To break backwards
## compatibility and safely perform lock changes, set the following variable to on.
#check_attr_before_lock=on

## pymel.core.uitypes has some utility methods for getting python qt objects from
## maya-gui names. This setting controls whether PySide or PyQt objects should
## be preferred. The setting will only be used if BOTH (or, technically,
## neither) are available - if only one is available, that module will always be
## used. If not set, it currently defaults to pyqt.
preferred_python_qt_binding = pyqt
#preferred_python_qt_binding = pyside

## Controls behavior when using deleted PyNodes
## Currently, the default behavior is "warn", which simply prints a warning when
## accessing the name of a deleted PyNode.  Since most wrappers of mel commands
## work by first converting PyNodes to their names, then running the mel command
## on the string names, the net effect is that the mel command will work (with a
## warning if) a node with the same name exists in the scene, on that "other"
## similarly named node, but error if no node with that name exists in the
## scene anymore.
## Since this is somewhat confusing and likely unexpected behavior, we will
## likely be deprecating this at some point, with the aim to making the default
## "error"
## The valid options here are "ignore", "warn", and "error".  Note that even if
## the setting is "ignore", this will only control what happens if you
## try to access a deleted PyNode's name - most operations will still error if
## no node with that name exists in the scene
## Do not used "warn_deprecated" yourself - it should behave the same as "warn",
## except that it will also warn that "warn" will soon no longer be the default,
## and tell you to change the setting in your personal pymel.conf (to either be
## "warn" or "error")...
deleted_pynode_name_access = warn_deprecated